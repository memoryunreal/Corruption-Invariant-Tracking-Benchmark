""" Vision Transformer (ViT) in PyTorch

A PyTorch implement of Vision Transformers as described in
'An Image Is Worth 16 x 16 Words: Transformers for Image Recognition at Scale' - https://arxiv.org/abs/2010.11929

The official jax code is released and available at https://github.com/google-research/vision_transformer

Status/TODO:
* Models updated to be compatible with official impl. Args added to support backward compat for old PyTorch weights.
* Weights ported from official jax impl for 384x384 base and small models, 16x16 and 32x32 patches.
* Trained (supervised on ImageNet-1k) my custom 'small' patch model to 77.9, 'base' to 79.4 top-1 with this code.
* Hopefully find time and GPUs for SSL or unsupervised pretraining on OpenImages w/ ImageNet fine-tune in future.

Acknowledgments:
* The paper authors for releasing code and weights, thanks!
* I fixed my class token impl based on Phil Wang's https://github.com/lucidrains/vit-pytorch ... check it out
for some einops/einsum fun
* Simple transformer style inspired by Andrej Karpathy's https://github.com/karpathy/minGPT
* Bert reference code checks against Huggingface Transformers and Tensorflow Bert

Hacked together by / Copyright 2020 Ross Wightman
"""
import torch
import torch.nn as nn
import math
import warnings


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class SELayer(nn.Module):
    def __init__(self, channel, se_ratio=0.0625):
        super(SELayer, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool1d(1)
        self.fc = nn.Sequential(
            nn.Linear(channel, int(channel * se_ratio), bias=False),
            nn.ReLU(inplace=True),
            nn.Linear(int(channel * se_ratio), channel, bias=False),
            nn.Sigmoid()
        )

    def forward(self, x):  # x: [B, N, C]
        x = torch.transpose(x, 1, 2)  # [B, C, N]
        b, c, _ = x.size()
        y = self.avg_pool(x).view(b, c)
        y = self.fc(y).view(b, c, 1)
        x = x * y.expand_as(x)
        x = torch.transpose(x, 1, 2)  # [B, N, C]
        return x


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class RelativePosition2D(nn.Module):

    def __init__(self, num_units, max_relative_position):
        super().__init__()

        self.num_units = num_units
        self.max_relative_position = max_relative_position
        # The first element in embeddings_table_v is the vertical embedding for the class
        self.embeddings_table_v = nn.Parameter(torch.randn(max_relative_position * 2 + 2, num_units))
        self.embeddings_table_h = nn.Parameter(torch.randn(max_relative_position * 2 + 2, num_units))

        # self.embeddings_table_v = nn.Embedding(max_relative_position * 2 + 1, num_units)
        # self.embeddings_table_h = nn.Embedding(max_relative_position * 2 + 1, num_units)
        # self.cls_position_embedding = nn.Parameter(torch.zeros(1, num_units))
        trunc_normal_(self.embeddings_table_v, std=.02)
        trunc_normal_(self.embeddings_table_h, std=.02)
        # nn.init.xavier_uniform_(self.embeddings_table_v)
        # nn.init.xavier_uniform_(self.embeddings_table_h)

    def forward(self, length_q, length_k):
        # remove the first cls token distance computation
        length_q = length_q - 1
        length_k = length_k - 1
        range_vec_q = torch.arange(length_q)
        range_vec_k = torch.arange(length_k)
        # compute the row and column distance
        distance_mat_v = (range_vec_k[None, :] // int(length_q ** 0.5) - range_vec_q[:, None] // int(length_q ** 0.5))
        distance_mat_h = (range_vec_k[None, :] % int(length_q ** 0.5) - range_vec_q[:, None] % int(length_q ** 0.5))
        # clip the distance to the range of [-max_relative_position, max_relative_position]
        distance_mat_clipped_v = torch.clamp(distance_mat_v, -self.max_relative_position, self.max_relative_position)
        distance_mat_clipped_h = torch.clamp(distance_mat_h, -self.max_relative_position, self.max_relative_position)

        # translate the distance from [1, 2 * max_relative_position + 1], 0 is for the cls token
        final_mat_v = distance_mat_clipped_v + self.max_relative_position + 1
        final_mat_h = distance_mat_clipped_h + self.max_relative_position + 1
        # pad the 0 which represent the cls token
        final_mat_v = torch.nn.functional.pad(final_mat_v, (1, 0, 1, 0), "constant", 0)
        final_mat_h = torch.nn.functional.pad(final_mat_h, (1, 0, 1, 0), "constant", 0)

        final_mat_v = torch.LongTensor(final_mat_v).cuda()
        final_mat_h = torch.LongTensor(final_mat_h).cuda()
        # get the embeddings with the corresponding distance
        embeddings = self.embeddings_table_v[final_mat_v] + self.embeddings_table_h[final_mat_h]

        return embeddings


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0., normalization=False,
                 relative_position=False,
                 num_patches=None, max_relative_position=14, relative_position_type='bias', se_ratio=0., qkv_dim=None):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.normalization = normalization
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        # define the relative position embedding parameters
        self.relative_position = relative_position
        self.relative_postion_type = relative_position_type
        if self.relative_position:
            if self.relative_postion_type == 'bias_shared':
                self.rel_pos_embed_k = RelativePosition2D(head_dim, max_relative_position)
                self.rel_pos_embed_v = RelativePosition2D(head_dim, max_relative_position)
            elif self.relative_postion_type == 'bias':
                self.rel_pos_embed_k = RelativePosition2D(dim, max_relative_position)
                self.rel_pos_embed_v = RelativePosition2D(dim, max_relative_position)
            elif self.relative_postion_type == 'direct':
                self.rel_pos_embed_k = RelativePosition2D(self.num_heads, max_relative_position)
                # self.rel_pos_embed_v = RelativePosition2D(1, max_relative_position)
        self.relative_position_type = relative_position_type
        self.qkv_dim = qkv_dim if qkv_dim is not None else dim
        self.qkv = nn.Linear(dim, self.qkv_dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(self.qkv_dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)
        self.se_ratio = se_ratio
        if self.normalization:
            self.scale = 1. / (self.scale / 2)

        if se_ratio > 0:
            self.se_layer = SELayer(dim, se_ratio=se_ratio)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, -1).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)
        if self.normalization:
            q = q / torch.norm(q, dim=-1, keepdim=True)
            k = k / torch.norm(k, dim=-1, keepdim=True)
        attn = (q @ k.transpose(-2, -1))
        attn = attn * self.scale

        if self.relative_position:
            # get the relative postion embeddings, shapes like [N, N, head_dim], where N is the query
            # length and head_dim = C//self.num_heads
            r_p_k = self.rel_pos_embed_k(N, N)

            if self.relative_postion_type == 'bias':
                # key is like (B, num_heads, N, head_dim), reshape it to (N, num_heads, B, head_dim) and do batch matmul with
                # the relative position embedding (N, N, num_heads, head_dim]) get shape like (N, num_heads, B, N). We reshape it to the
                # same size as attn (B, num_heads, N, N)
                r_p_k = self.rel_pos_embed_k(N, N).transpose(1, 2).reshape(N, self.num_heads, -1, N)

                attn = attn + (q.permute(2, 1, 0, 3) @ r_p_k) \
                    .permute(2, 1, 0, 3) * self.scale
            elif self.relative_position_type == 'bias_shared':
                # key is like (B, num_heads, N, head_dim), reshape it to (N, B*num_heads, head_dim) and do batch matmul with
                # the relative position embedding (N, N, head_dim]) get shape like (N, B*num_heads, N). We reshape it to the
                # same size as attn (B, num_heads, N, N)
                attn = attn + (q.permute(2, 0, 1, 3).reshape(N, self.num_heads * B, -1) @ r_p_k.transpose(2, 1)) \
                    .transpose(1, 0).reshape(B, self.num_heads, N, N) * self.scale

            elif self.relative_position_type == 'direct':
                attn = attn + r_p_k.squeeze()

        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)
        # relative position embedding
        x = (attn @ v).transpose(1, 2).reshape(B, N, -1)
        if self.relative_position:
            if self.relative_position_type == 'bias':
                r_p_v = self.rel_pos_embed_v(N, N).reshape(N, N, self.num_heads, -1).transpose(1, 2)
                attn_1 = attn.permute(2, 1, 0, 3)
                # The size of attention is (B, num_heads, N, N), reshape it to (N, num_heads, B, N) and do batch matmul with
                # the relative position embedding of V (N, num_heads, N, head_dim) get shape like (N, num_heads, B, head_dim). We reshape it to the
                # same size as x (B, num_heads, N, hidden_dim)
                x = x + (attn_1 @ r_p_v).permute(2, 0, 1, 3).reshape(B, N, C)
            elif self.relative_position_type == 'bias_shared':
                r_p_v = self.rel_pos_embed_v(N, N)
                attn_1 = attn.permute(2, 0, 1, 3).reshape(N, B * self.num_heads, -1)
                # The size of attention is (B, num_heads, N, N), reshape it to (N, B*num_heads, N) and do batch matmul with
                # the relative position embedding of V (N, N, head_dim) get shape like (N, B*num_heads, head_dim). We reshape it to the
                # same size as x (B, num_heads, N, hidden_dim)
                x = x + (attn_1 @ r_p_v).transpose(1, 0).reshape(B, self.num_heads, N, C // self.num_heads)\
                    .transpose(2, 1).reshape(
                    B, N, C)

        x = self.proj(x)
        if self.se_ratio > 0:
            x = self.se_layer(x)
        x = self.proj_drop(x)
        return x
